# We plan to execute manually for tutorial purposes
trigger: none
# for production projects, the recommended trigger is peridical, once a week

schedules:
- cron: "0 12 * * 0"
  displayName: Weekly Sunday build
  branches:
    include:
    - main

pool:
  name: GCC_MIUN_VMSS
  vmImage: Canonical:0001-com-ubuntu-confidential-vm-focal:20_04-lts-gen2:latest

jobs:
- job: downloadimages
  displayName: 'Download Software AG Images for given templates list'
  variables: 
  - group: SDC.Options
  steps:

  # update ubuntu machine
  - script: |
      sudo apt update
      #sudo apt install cifs-utils samba-common samba winbind
      sudo apt install cifs-utils wget apt-transport-https software-properties-common
      wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
      # Register the Microsoft repository GPG keys
      sudo dpkg -i packages-microsoft-prod.deb
      # Update the list of packages after we added packages.microsoft.com
      sudo apt-get update
      # Install PowerShell
      sudo apt-get install -y powershell
    displayName: 'System software preparation'

  # get SA share secrets
  - task: DownloadSecureFile@1
    name: SASecureInfo
    displayName: 'Download secure information for images share'
    inputs:
      secureFile: 'sa.share.secrets.sh'

  # mount SA share
  - script: |
      if [ ! -f "${SASECUREINFO_SECUREFILEPATH}" ]; then
        echo "Secure file path not present: ${SASECUREINFO_SECUREFILEPATH}"
        exit 1
      fi

      echo "Sourcing secure information..."
      chmod u+x "${SASECUREINFO_SECUREFILEPATH}"
      . "${SASECUREINFO_SECUREFILEPATH}"

      if [ -z ${SAG_AZ_SA_NAME+x} ]; then
        echo "Secure information has not been sourced correctly"
        exit 2
      fi

      chmod u+x ${BUILD_SOURCESDIRECTORY}/scripts/*.sh
      . ${BUILD_SOURCESDIRECTORY}/scripts/setEnv.sh

      if [ -z ${MY_sd+x} ]; then
        echo "Secure information has not been sourced correctly"
        exit 3
      fi

      echo "Mounting the given file share"
      mkdir -p "$MY_sd"
      sudo mount -t cifs "$AZ_SMB_PATH" "$MY_sd" -o "vers=3.0,username=$SAG_AZ_SA_NAME,password=$AZ_SM_SHARE_KEY,dir_mode=0777,file_mode=0777"
      resultMount=$?
      if [ $resultMount -ne 0 ]; then
        logE "Error mounting the images share, result $resultMount"
        exit 4
      fi
      echo "share contains:"
      ls -lart "$MY_sd"
    displayName: 'Mount images share'

  # get SDC Credentials
  - task: DownloadSecureFile@1
    name: SDCCredentials
    displayName: 'Download SDC credentials'
    inputs:
      secureFile: 'sdc.credentials.sh'

  # build images
  - script: |
      echo "SUIF_TAG=$(SUIF_TAG)"
      export SUIF_TAG="$(SUIF_TAG)"
      export templates="$(templates)"
      echo "share contains:"
      ls -lart "$MY_sd"
      chmod u+x ${BUILD_SOURCESDIRECTORY}/scripts/*.sh
      ${BUILD_SOURCESDIRECTORY}/scripts/buildSagImages.sh
    displayName: 'Generate Software AG image files'

  # umount SA share
  - script: |
      chmod u+x ${BUILD_SOURCESDIRECTORY}/scripts/*.sh
      . /scripts/setEnv.sh

      if [ -z ${MY_sd+x} ]; then
        echo "Secure information has not been sourced correctly"
        exit 1
      fi
      sudo umount "$MY_sd"
    displayName: 'Unmount images share'